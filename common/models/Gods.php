<?php

namespace common\models;

use backend\modules\prom\behaviors\PromOfferBehavior;
use backend\modules\prom\models\promOffer;
use common\models\elastic\AllProducts;
use common\models\mongo\Products;
use Yii;
use corpsepk\yml\behaviors\YmlOfferBehavior;
use corpsepk\yml\models\Offer;
use yii\helpers\Html;

/**
 * This is the model class for table "abh_gods".
 *
 * @property integer $id
 * @property string $title
 * @property string $slug_gods
 * @property string $discription_gods
 * @property integer $id_prise
 * @property integer $create_at
 * @property integer $upedate_at
 * @property integer $have
 * @property integer $price_selling
 */
class Gods extends \yii\db\ActiveRecord
{
    public $image;
    public $colors;
    public $delcolor;
    public $linens;
    public $sheets;
    public $pillowcases;
    public $duvetcover;
    public $sheetswhoseles;
    public $pillowcaseswhoseles;
    public $duvetcoverwhoseles;
    public $patern;
    public $count;
    public $size;
    

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'abh_gods';
    }

    public function beforeSave($insert)
    {

        if($insert ){
            $this->mouthParser=($this->pregmath)? date('n',time()):0;
        }
        $this->upedate_at=time();    

        
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

   /* public function afterSave($insert, $changedAttributes)
    {

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if($insert){
            $arrayProduct=array(
               'title'=>$this->title,
                'slug'=>$this->slug_gods,
                'discription'=>$this->discription_gods,
                'created_at'=>time(),
                'upedate_at'=>time(),
                'product_id'=>$this->id,
            );
            foreach ( $changedAttributes as $key=>$value) {
                if($key!='title'&&$key!='slug_gods'&&$key!='discription_gods'&&$key!='create_at'&&$key!='update_at'&&$key!='id'){
                    $arrayProduct['addFeild'][$key]=$this->$key;
                }
            }
            $product=new Products($arrayProduct);
            $product->save();
        }else{
            $product=Products::find()->where(['product_id'=>$this->id])->one();
            foreach ($changedAttributes as $key => $value ){
                switch ($key){
                    case 'title':
                        $product->title=$this->title;
                        break;
                    case 'slug' :
                        $product->title=$this->slug_gods;
                        break;
                    case 'discription' :
                        $product->title=$this->discription_gods;
                        break;
                    default:
                        $add=$product->addFeild;
                        $add[$key]=$this->$key;
                        $product->addFeild = $add;
                }
            }
        }
    }
    
    /*<---------------К AfterSave ---------------------------------> * /
    
    private function AfterSavePrice(){
        $result=0;
        if ($this->prise) {
            switch ($this->prise) {
                case $this->prise->price1 != 0:
                    $result = $this->prise->price1;
                    break;
                case $this->prise->price2 != 0:
                    $result = $this->prise->price2;
                    break;
                case $this->prise->priceEvro != 0:
                    $result = $this->prise->priceEvro;
                    break;
                default:
                    $result = $this->prise->priceSem;
            }
        }
        return $result;
    }*/
    
    /*<----------------------------------------------------начало связей-------------------------------------------------->*/
    public function getPrise(){
        return $this->hasOne(Prise::className(),['id'=>'id_prise']);
    }
    public function getImages(){
        return $this->hasMany(Image::className(),['id_gods'=>'id']);
    }
    public function getHomeImage(){
        return $this->hasOne(Image::className(),['id_gods'=>'id'])->andWhere(['forHome'=>1]);
    }
    public function getFancyImage(){
        return $this->hasOne(Image::className(),['id_gods'=>'id'])->andWhere(['forFancy'=>1]);
    }
    public function getLinens(){
        return $this->hasOne(Linesall::className(),['idlenens'=>'id']);
    }
    public function getCurrensy(){
        return $this->hasOne(FrontendSetup::className(),['id'=>'currency']);
    }
    public function getCategorys(){
        return $this->hasOne(Category::className(),['id'=>'id_cat'])->viaTable('abh_cat_gods_post', ['id_gods' => 'id']);
    }
    public function getCategory(){
        return $this->hasMany(Category::className(),['id'=>'id_cat'])->viaTable('abh_cat_gods_post', ['id_gods' => 'id']);
    }
    public function getAddfeilds(){
        return $this->hasMany(Addlfeild::className(),['id_gods'=>'id']);
    }
    public function getWinter(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'winter']);
    }
    public function getComposition(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'composition']);
    }
    public function getCountry(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'country']);
    }
    public function getDelivery(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'delivery']);
    }
    public function getSpring(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'spring']);
    }
    public function getSummer(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'summer']);
    }
    public function getFall(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'fall']);
    }
    public function getArticle(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'article']);
    }
    public function getSize1(){
        return $this->hasMany(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size1']);
    }
    public function getColor(){
        return $this->hasMany(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'color']);
    }
    public function getSize2(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size2']);
    }
    public function getSize3(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size3']);
    }
    public function getSize4(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size4']);
    }
    public function getSize5(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size5']);
    }
    public function getSize6(){
        return $this->hasOne(Addlfeild::className(),['id_gods'=>'id'])->andWhere(['key_feild'=>'size6']);
    }
    public function getRatings(){
        return $this->hasMany(Rating::className(),['id_gods'=>'id']);
    }
    public function  getOrders(){
        return $this->hasMany(Orders::className(),[ 'id'=>'order_id'])->viaTable('abh_basket', ['goodsid'=>'id']);
    }
    public function getLinesall(){
        return $this->hasOne(Linesall::className(),['idlenens'=>'id']);
    }
    public function getUser(){
        return $this->hasOne(User::className(),['id'=>'user_id']);
    }
    public function getTablesize(){
        return $this->hasOne(FrontendSetup::className(),['id'=>'table_size']);
    }
    public function getCatgods(){
        return $this->hasMany(Catgodpost::className(),['id_gods'=>'id']);
    }

    /*<--------------------------------------------------------конец связей------------------------------------------------------->*/
    /*<--------------------------------------------------------непойми чего------------------------------------------------------->*/
    public function getratingCount()
    {
        if ($this->isNewRecord) {
            return null; // нет смысла выполнять запрос на поиск по пустым ключам
        }

        return $this->ratingCountAggregation;
    }
    /**
     * Объявляет новое отношение, основанное на 'orders', которое предоставляет агрегацию.
     */
    public function getratingCountAggregation()
    {
        return $this->getRatings()
            ->select(['id_gods', 'counted' => 'count(*)'])
            ->groupBy('id_gods')
            ->asArray(true);
    }
    public function getratingSum()
    {
        if ($this->isNewRecord) {
            return null; // нет смысла выполнять запрос на поиск по пустым ключам
        }
        return $this->ratingSumAggregation;
    }
    /**
     * Объявляет новое отношение, основанное на 'orders', которое предоставляет агрегацию.
     */
    public function getratingSumAggregation()
    {
        return $this->getRatings()
            ->select(['id_gods', 'sumed' => 'sum(quantity)'])
            ->groupBy('id_gods')
            ->asArray(true);
    }
    public function saveSize($idSizes,$id){
        if(isset($idSizes)){
            foreach ($idSizes as $size){
                $frontSetup=FrontendSetup::findOne($size);
                $addFeildModel=Addlfeild::findOne(['id_gods' =>  $id, 'key_feild'=>'size1', 'value' =>  $frontSetup->vaelye]);
                if(empty($addFeildModel)) {
                    $addFeild = new Addlfeild([
                        'scenario' => Addlfeild::SCENARIO_ALL,
                        'id_gods' => $id,
                        'key_feild' => 'size1',
                        'value' => $frontSetup->vaelye
                    ]);
                    if(!$addFeild->save()){
                        return $addFeild->getErrors();
                    }
                }
            }
        }
    }
    public function saveColor($colors,$id){
        if(isset($colors)){
            $delColor=Addlfeild::find()->where(['id_gods' =>  $id,'key_feild'=>'color'])->andWhere(['not in','value', $colors])->all();
            $this->delColor($id,$delColor);
            if(is_array($colors)){
                foreach ($colors as $color){
                    $addFeildModel=Addlfeild::findOne(['id_gods' =>  $id, 'key_feild'=>'color', 'value' =>  $color]);
                    if(empty($addFeildModel)) {
                        $addFeild = new Addlfeild([
                            'scenario' => Addlfeild::SCENARIO_ALL,
                            'id_gods' => $id,
                            'key_feild' => 'color',
                            'value' => $color
                        ]);
                        $addFeild->save();
                    }
                }
            }
        }
    }
    public function delColor($id, $colors=null){
        if(isset ($colors)){
            foreach ($colors as $color){
                $color->delete();
            }
        }else{
            $addFields=Addlfeild::find()->where(['id_gods' =>  $id, 'key_feild'=>'color'])->all();
            if(empty($addFields)){
                foreach ($addFields as $addField){
                    $addField->delete();
                }
            }
        }
        
    }
    /*<--------------------------------------------------------конец непойми чего------------------------------------------------------->*/
    /*<--------------------------------------------------------Для раздельного белья---------------------------------------------------->*/
    public function addLinenesJson($goods,$post){
        $arr=array();
        $lenensCat=Category::find()->where(['name'=>'Постельное белье'])->one();
        $errArray=array();
        if(isset($post->goods->size1)){
            $this->saveAddfeild($goods,'size1',$post->goods->size1);
        }
        if(isset($post->goods->size2)){
            $this->saveAddfeild($goods,'size2',$post->goods->size2);
        }
        if(isset($post->goods->size3)){
            $this->saveAddfeild($goods,'size3',$post->goods->size3);
        }
        if(isset($post->goods->size4)){
            $this->saveAddfeild($goods,'size4',$post->goods->size4);
        }
        if(isset($post->goods->size5)){
            $this->saveAddfeild($goods,'size5',$post->goods->size5);
        }
        if(isset($post->goods->size6)){
            $this->saveAddfeild($goods,'size6',$post->goods->size6);
        }
        if(!empty($post->shirts)){
            $sheetsCat=Category::find()->where(['name'=>'Простыни'])->one();
            $model=$this->saveGoods($goods,$post->shirts->priseSheet,'простынь','sheets',2);

            if(isset($post->shirts->size1)){
                $err=$this->saveAddfeild($model,'size1',$post->shirts->size1);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->shirts->size2)){
                $err=$this->saveAddfeild($model,'size2',$post->shirts->size2);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->shirts->size3)){
                $err=$this->saveAddfeild($model,'size3',$post->shirts->size3);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->shirts->size4)){
                $err=$this->saveAddfeild($model,'size4',$post->shirts->size4);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->shirts->size5)){
                $err=$this->saveAddfeild($model,'size5',$post->shirts->size5);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->shirts->size6)){
                $err=$this->saveAddfeild($model,'size6',$post->shirts->size6);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            $this->saveCat($sheetsCat,$lenensCat,$model);
            $sheetsgoods=$model->id;
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
        }else{
            $sheetsgoods=null;
        }
        if(!empty($post->pillowcases)){
            $pillowcasesCat=Category::find()->where(['name'=>'Наволочки'])->one();
            $model=$this->saveGoods($goods,$post->pillowcases->prisePillowcases,'навалочка','pillowcases',2);
            if(isset($post->pillowcases->size1)){
                $err=$this->saveAddfeild($model,'size1',$post->pillowcases->size1);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->pillowcases->size2)){
                $err=$this->saveAddfeild($model,'size2',$post->pillowcases->size2);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->pillowcases->size3)){
                $err=$this->saveAddfeild($model,'size3',$post->pillowcases->size3);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->pillowcases->size4)){
                $err=$this->saveAddfeild($model,'size4',$post->pillowcases->size4);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->pillowcases->size5)){
                $err=$this->saveAddfeild($model,'size5',$post->pillowcases->size5);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->pillowcases->size6)){
                $err=$this->saveAddfeild($model,'size6',$post->pillowcases->size6);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            $this->saveCat($pillowcasesCat,$lenensCat,$model);
            $pillowcasesgoods=$model->id;
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
        }else{
            $pillowcasesgoods=null;
        }
        if(!empty($post->duvetscovers)){
            $duvetcoverCat=Category::find()->where(['name'=>'Пододеяльники'])->one();
            $model=$this->saveGoods($goods,$post->duvetscovers->priseDuvetscover,'пододеяльник','duvetscover',2);
            if(isset($post->duvetscovers->size1)){
                $err=$this->saveAddfeild($model,'size1',$post->duvetscovers->size1);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->duvetscovers->size2)){
                $err=$this->saveAddfeild($model,'size2',$post->duvetscovers->size2);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->duvetscovers->size3)){
                $err=$this->saveAddfeild($model,'size3',$post->duvetscovers->size3);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->duvetscovers->size4)){
                $err=$this->saveAddfeild($model,'size4',$post->duvetscovers->size4);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->duvetscovers->size5)){
                $err=$this->saveAddfeild($model,'size5',$post->duvetscovers->size5);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            if(isset($post->duvetscovers->size6)){
                $err=$this->saveAddfeild($model,'size6',$post->duvetscovers->size6);
                if (isset($err)){
                    $errArray[]=$err;
                }
            }
            $this->saveCat($duvetcoverCat,$lenensCat,$model);
            $duvetcovergoods=$model->id;
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
        }else{
            $duvetcovergoods=null;
        }
        $linenes= new Linesall([
            'idlenens'      =>$goods->id,
            'idsheerts'     =>$sheetsgoods,
            'idpillowcases' =>$pillowcasesgoods,
            'duvetcover'    =>$duvetcovergoods
        ]);
        $linenes->save();
        if (isset($errArray)){
            return $errArray;
        }
    }
    public function saveCat($cat,$lines,$model){
        $cat=new Catgodpost([
            'id_cat'=>$cat->id,
            'id_gods'=>$model->id
        ]);
        $cat->save();
        $catToLinenes=new Catgodpost([
            'id_cat'=>$lines->id,
            'id_gods'=>$model->id
        ]);
        $catToLinenes->save();
    }

    public function saveAddfeild($model,$size,$value){
        $addfeild=new Addlfeild([
            'scenario' => Addlfeild::SCENARIO_ALL,
            'id_gods'   =>  $model->id,
            'key_feild' =>   $size,
            'value'     =>  $value
        ]);
        if($addfeild->save()){}else{
            return $addfeild->getErrors();
        }

    }
    public function addLinenes($goods,$post){
        $lenensCat=Category::find()->where(['name'=>'Постельное белье'])->one();
        if(isset($post['sheets'])){
            $sheetsCat=Category::find()->where(['name'=>'Простыни'])->one();
            $model=$this->saveGoods($goods,$post['sheets'],'простынь','sheets',2);
            if(isset($post['sheetswhoseles'])){
                $prise=Prise::findOne($post['sheets']);
                $prise->whosales_id=$post['sheetswhoseles'];
                $prise->save();
            }
            $catToGoods=new Catgodpost([
                'id_cat'=>$sheetsCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoods->save();
            $catToGoodsLinenes=new Catgodpost([
                'id_cat'=>$lenensCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoodsLinenes->save();
            $sheetsgoods=$model->id;
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
        }else{
            $sheetsgoods=null;
        }
        if(isset($post['pillowcases'])){
            $sheetsCat=Category::find()->where(['name'=>'Наволочки'])->one();
            $model=$this->saveGoods($goods,$post['pillowcases'],'наволочки','pillowcases',2);
            if(isset($post['pillowcaseswhoseles'])){
                $prise=Prise::findOne($post['pillowcases']);
                $prise->whosales_id=$post['pillowcaseswhoseles'];
                $prise->save();
            }
            $catToGoods=new Catgodpost([
                'id_cat'=>$sheetsCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoods->save();
            $catToGoodsLinenes=new Catgodpost([
                'id_cat'=>$lenensCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoodsLinenes->save();
            $pillowcasesgoods=$model->id;
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
        }else{
            $pillowcasesgoods=null;
        }
        if(isset($post['duvetcover'])){
            $sheetsCat=Category::find()->where(['name'=>'Пододеяльники'])->one();
            $model=$this->saveGoods($goods,$post['duvetcover'],'пододеяльники','duvetcover',2);
            if(isset($post['duvetcoverwhoseles'])){
                $prise=Prise::findOne($post['duvetcover']);
                $prise->whosales_id=$post['duvetcoverwhoseles'];
                $prise->save();
            }
            $catToGoods=new Catgodpost([
                'id_cat'=>$sheetsCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoods->save();
            $catToGoodsLinenes=new Catgodpost([
                'id_cat'=>$lenensCat->id,
                'id_gods'=>$model->id
            ]);
            $catToGoodsLinenes->save();
            foreach ($goods->images as $image){
                if($image->forHome==1){
                    $img=new Image([
                        'id_gods'=>$model->id,
                        'path'=>$image->path,
                        'name'=>$image->name,
                        'forHome'=>1,
                        'forFancy'=>1,
                    ]);
                    $img->save();
                }
            }
            $duvetcovergoods=$model->id;
        }else{
            $duvetcovergoods=null;
        }
        $linenes= new Linesall([
            'idlenens'      =>$goods->id,
            'idsheerts'     =>$sheetsgoods,
            'idpillowcases' =>$pillowcasesgoods,
            'duvetcover'    =>$duvetcovergoods
        ]);
        if($linenes->save()){
            return false;
        }else{
            return $linenes->getErrors();
        }
        $gods=Gods::findOne(['id'=>$goods->id]);
        $gods->idlenens=$linenes->id;
        $gods->save();
    }
    public function saveGoods($goods,$post,$rus,$slug,$sets){
        $model=new Gods();
        $model->title=$goods->title.'-'.$rus;
        $model->slug_gods=$goods->slug_gods.'-'.$slug;
        $model->discription_gods=$goods->discription_gods;
        $model->create_at=time();
        $model->id_prise=$post;
        $model->sets=$sets;
        $model->have=0;
        $model->quote=$goods->quote;
        $model->save();
        return $model;
    }
    /*<----------------------------------------------------------окончание для белья------------------------------------------------------>*/
    /*<-----------------------------------------------------------------для yml-----------------------------------------------------------> */
    public function behaviors()
    {
        return [
            'ymlOffer' => [
                'class' => YmlOfferBehavior::className(),
                'scope' => function ($model) {
                    /** @var \yii\db\ActiveQuery $model */
                    $model->with('category','addfeilds','prise','images');
                },
                'dataClosure' => function ($model) {
                    /** @var self $model */if(isset($model->category)) {
                        if(isset($model->price_selling)) {
                            return new Offer([
                                'id' => $model->id,
                                'available' => $model->getAvailabel($model->have),
                                'url' => $model->getUrl($model->slug_gods),
                                'price' => $model->getNewPrice($model->price_selling, $model->prise->price1),
                                'delivery' => $model->getDivelery($model->addfeilds),
                                'vendorCode' => $model->getVendorCode($model->addfeilds),
                                'currencyId' => 'UAH',
                                'pickup' => true,
                                'vendor'=>'Милый дом',
                                'oldprice' => $model->prise->price1,
                                'picture' => $model->getPicture($model->images),
                                'country_of_origin' => 'Украина',
                                'param' => $model->getParams($model->addfeilds),
                                'categoryId' => 64,
                                'name' => $model->getTitle($model->title),
                                'description' => $model->getDescription($model->discription_gods),
                            ]);
                        } else {
                            return new Offer([
                                'id' => $model->id,
                                'available' => $model->getAvailabel($model->have),
                                'url' => $model->getUrl($model->slug_gods),
                                'vendor'=>'Милый дом',
                                'price' => $model->getThePrice($model->prise),
                                'delivery' => $model->getDivelery($model->addfeilds),
                                'vendorCode' => $model->getVendorCode($model->addfeilds),
                                'currencyId' => 'UAH',
                                'pickup' => true,
                                'picture' => $model->getPicture($model->images),
                                'country_of_origin' => 'Украина',
                                'param' => $model->getParams($model->addfeilds),
                                'categoryId' => $model->getCategores($model),
                                'name' => $model->getTitle($model->title),
                                'description' => $model->getDescription($model->discription_gods),
                            ]);
                        }
                    }
                }
            ],
            'promOffer' => [
                'class' => PromOfferBehavior::className(),
                'scopeProm' => function ($model) {
                    /** @var \yii\db\ActiveQuery $model */
                    $model->with('category','addfeilds','prise','images','catgods');
                },
                'dataPromClosure' => function ($model) {
                    /** @var self $model */
                    if(isset($model->category)&&$model->have==0) {
                        if(isset($model->price_selling)) {
                            return new promOffer([
                                'id' => $model->getIdPromOffer($model->catgods),
                                'available' => $model->getAvailabel($model->have),
                                'url' => $model->getUrl($model->slug_gods),
                                'price' => $model->getNewPrice($model->price_selling, $model->prise->price1),
                                'delivery' => $model->getDivelery($model->addfeilds),
                                'vendorCode' => $model->getVendorCode($model->addfeilds),
                                'currencyId' => 'UAH',
                                'pickup' => true,
                                //'vendor'=>'Милый дом',
                                'oldprice' => $model->prise->price1,
                                'picture' => $model->getPicture($model->images),
                                'country_of_origin' => 'Украина',
                                'param' => $model->getParams($model->addfeilds),
                                'categoryId' => $model->getCats($model),
                                'name' => $model->getTitle($model->title),
                                'description' => $model->getDescription($model->discription_gods),
                                'customAttributes' => $model->getCustom($model->addfeilds)
                            ]);
                        } else {
                            return new promOffer([
                                'id' => $model->getIdPromOffer($model->catgods),
                                'available' => $model->getAvailabel($model->have),
                                'url' => $model->getUrl($model->slug_gods),
                                //'vendor'=>'Милый дом',
                                'price' => $model->getThePrice($model->prise),
                                'delivery' => $model->getDivelery($model->addfeilds),
                                'vendorCode' => $model->getVendorCode($model->addfeilds),
                                'currencyId' => 'UAH',
                                'pickup' => true,
                                //'vendor'=>'Милый дом',
                                'picture' => $model->getPicture($model->images),
                                'country_of_origin' => 'Украина',
                                'param' => $model->getParams($model->addfeilds),
                                'categoryId' => $model->getCats($model),
                                'name' => $model->getTitle($model->title),
                                'description' => $model->getDescription($model->discription_gods.' Более подробную информацию Вы можете посмотреть на нашем официальном сайте <a href="http://miliydom.com.ua">miliydom.com.ua</a>'),
                                'customAttributes' => $model->getCustom($model->addfeilds)
                            ]);
                        }
                    }
                }
            ],
        ];
    }
    public function getIdPromOffer($models){
        $arrayId=array();
        foreach ($models as $model){
            $arrayId[$model->id_cat]=$model->id;
        }
        return $arrayId;
    }
    public function getNewPrice($minus,$old){
        return $old-$minus;
    }
    public function getUrl($model){
        return 'http://miliydom.com.ua/goods/'.$model;
    }
    public function getDescription($discription){
        $desc=str_replace('<p>','',$discription);
        return str_replace('</p>','',$desc);
    }
    public function getTitle($title){
        return  $title;
    }
    public function getAvailabel($have){
        if($have==0){
            return true;
        }else{
            return false;
        }
    }
    public function getVendorCode($model){
        $params='';
        $addFeilds=array_filter($model, function ($item){
            return $item->key_feild=='article';
        });
        foreach ($addFeilds as $addFeild){
            $params=$addFeild->value;
        }
        return $params;
    }
    public function getThePrice($model){
        //$prise = '';

        if($model->price1!=0){
            $prise = $model->price1;
        }elseif($model->price2!=0) {
            $prise = $model->price2;
        }elseif($model->priceEvro!=0) {
            $prise = $model->priceEvro;
        }elseif($model->priceSem!=0){
            $prise = $model->priceSem;
        }else{
            $prise = 0;
        }
        return $prise;
    }
    public function getCustom($model){
        $params=array();
        $addFeilds=array_filter($model, function ($item){
            return $item->key_feild=='keywords';
        });
        foreach ($addFeilds as $addFeild){
            $params['keywords']=$addFeild->value;
        }
        return $params;
    }
    public function getCategores($model){
        $count=0;
        $cat='';
        foreach ($model->category as $category){
            if(isset($category))
                $cat=$category->id;
            else
                $cat=0;
            $count=$count+1;
            if($count==1){
                break;
            }
        }
        return $cat;
    }
    public function getCats($model){
        $cat=array();
        if(isset($model->category)) {
            foreach ($model->category as $category) {
                if (isset($category)){
                    $cat[] = $category->id;
                }
            }
        }else{
            $cat[]=63;
        }
        return $cat;
    }
    public function getPicture($images){
        $picturesarr=array();
        foreach ($images as $image){
            $picturesarr[]=Yii::getAlias('@frontendWebroot').'/image/'.$image->path.''.$image->name;
        }
        krsort($picturesarr);
        return $picturesarr;
    }
    public function getDivelery($model){
        $divelery='';
        $addFeilds=array_filter($model, function ($item){
            return $item->key_feild=='delivery';
        });
        if(isset($addFeilds)){
            return true;
        }else{
            return false;
        }

    }
    public function getParams($model){
        $params=array();
        $result=array();
        $addFeilds1=array_filter($model, function ($item){
            return $item->key_feild=='size1';
        });
        $addFeilds2=array_filter($model, function ($item){
            return $item->key_feild=='size2';
        });
        $addFeilds3=array_filter($model, function ($item){
            return $item->key_feild=='size3';
        });
        $addFeilds4=array_filter($model, function ($item){
            return $item->key_feild=='size4';
        });

            if(isset($addFeilds1)){
                $params['name'] = 'Размер';
               $size1='';
                foreach ($addFeilds1 as $addFeild) {
                    $size1 .= $addFeild->value.",";
                }
                $params['value']=$size1;
                $result[] = $params;
            }

            if(isset($addFeilds2)) {
                $params['name'] = 'Размер';
                $size2='';
                foreach ($addFeilds1 as $addFeild) {
                    $size2 .= $addFeild->value.",";
                }
                $params['value']=$size2;
                $result[] = $params;
            }
            if(isset($addFeilds3)){
                $params['name'] = 'Размер';
                $size3='';
                foreach ($addFeilds1 as $addFeild) {
                    $size3 .= $addFeild->value.",";
                }
                $params['value']=$size3;
                $result[] = $params;
            }
            if(isset($addFeilds4)) {
                $params['name'] = 'Размер';
                $size4='';
                foreach ($addFeilds4 as $addFeild) {
                    $size4 .= $addFeild->value.",";
                }
                $params['value']=$size4;
                $result[] = $params;
            }
            if(isset($this->color)){
                $params['name']= 'Цвет';
                $color='';
                foreach($this->color as $colors){
                    if($colors->frontendSetup)
                    $color.=$colors->frontendSetup->key_setup.',';

                }
                $params['value']= $color;
                $result[]=$params;
            }

            return $result;
    }
    /*<-----------------------------------------------------------------------конец для YML-------------------------------------------------------->*/
    /*<-----------------------------------------------------------------------Для индекса----------------------------------------------------------> */

    public function getProvider($id,$sites){
        if($sites=='барабашово'||$sites=='барабашово ') {
            $addFields = array_filter($id, function ($item) {
                return $item->key_feild =='name_provider';
            });
            foreach ($addFields as $addField){
                if (isset($addField)) {
                    return $addField->value;
                } else {
                    return 'поставщика нет';
                }
            }

        }else{
            return 'не барабашово';
        }
    }
    public function getGoodsIdsByProviders(){
        $models=Gods::find()->with('prise')->all();
        $idgoods=array();
        foreach ($models as $model){
            if(is_object($model->prise)) {
                if ($model->prise->sites == 'барабашово' || $model->prise->sites == 'барабашово ') {
                    $idgoods[] = $model->id;
                }
            }
        }
        return $idgoods;
    }
    public function getInfo($model){
        if(isset($model->user)) {
            if(isset($model->upedate_at))
                return 'Изменен ' . date('d:m:Y', $model->upedate_at) . ' пользователем ' . $model->user->username;
            else
                return 'Добавлен ' . date('d:m:Y', $model->create_at) . ' пользователем ' . $model->user->username;
        }else{
            return 'Товар не изменялся';
        }
    }
    public function getImage($id){
        $img = Image::findOne(['id_gods'=>$id]);
        if(isset($img)) {
            return Html::img(Yii::getAlias('@frontendWebroot') . '/image/' . $img->path . '' . $img->name, ['width' => 60]);
        }else{
            return false;
        }
    }

    public function  theGetValue($id,$feild){
        $value=Addlfeild::findOne(['id_gods'=>$id,'key_feild'=>$feild]);
        if(isset($value)){
            return $value->value;
        }else{
            return false;
        }
    }
    public function theGetCatParent($model){
        $parentCat=array();
        foreach ($model->category as $cats){
            $parentCat[]=$cats->parrent_category;
        }
        $idparent=array_unique($parentCat);
        $catParrent=Category::find()->where(['id'=>$idparent])->all();
        $textCatPerrent='';
        foreach ($catParrent as $cpar){
            $textCatPerrent.=$cpar->name.'<br/>';
        }
        return $textCatPerrent;
    }
    public function theGetCat($categorys){
        if(isset($categorys))
        return $categorys->name;
        else
        return false;
    }
    public function getThePrise($prise){
        if(is_object($prise)){
           if(isset($prise->name))
            return $prise->name; 
        }   
            return null;
    }

    public function getSizeFromIndex(){
        $size='';
        if(!empty($this->size1)){
            foreach ($this->size1 as $size1) {
                $size.=$size1->value.'</br>';
            }
        }
        return $size;//$size;
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'slug_gods', 'discription_gods', 'create_at','have'], 'required'],
            [['discription_gods'], 'string'],
            [['color','pregmath','currency'],'safe'],
            [['id_prise', 'create_at', 'upedate_at','price_selling','have','pluss','manufacturer_price'], 'integer'],
            [['title','quote'], 'string', 'max' => 255],
            [['slug_gods','url'], 'string', 'max' => 610],
        ];
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'article'=> Yii::t('backend','ARTICLE'),
            'title' => Yii::t('backend','TITLE_GODS'),
            'slug_gods' => Yii::t('backend','SLUG_GODS'),
            'discription_gods' => Yii::t('backend','DISCRIPTION_GODS'),
            'id_prise' => Yii::t('backend','ID_PRICE'),
            'url'       =>  Yii::t('backend','URL_GOODS'),
            'pluss'       =>  Yii::t('backend','PLUSS_GOODS'),
            'pregmath'  =>  Yii::t('backend','PREGMATH'),
            'have'      =>  Yii::t('backend','HAVE'),
            'price_selling'=>Yii::t('backend','PRICE_SELING'),
            'create_at' => 'Create At',
            'upedate_at' => 'Upedate At',
            'quote'=>Yii::t('backend','QUOTE'),
            'linens'=>Yii::t('backend','ADDLINENS'),
            'user_id'=>Yii::t('backend','INFOUPDATE'),
            'viewsTS'=>Yii::t('backend','viewsTS'),
            'table_size'=>Yii::t('backend','table_size'),
            'manufacturer_price'=>Yii::t('backend','MANUFACTURERPRICE'),
        ];
    }
}
